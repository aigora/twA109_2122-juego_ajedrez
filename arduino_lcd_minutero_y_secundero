
#include <LiquidCrystal_I2C.h>


LiquidCrystal_I2C lcd(0x27,16,2);


#define LED_JUGADOR_1 5
#define LED_JUGADOR_2 6
#define PULSADOR_JUGADOR_1 8
#define PULSADOR_JUGADOR_2 9


#define LED_GANADOR 3


// Estados juego
#define DETENIDO 0
#define TURNO_JUGADOR_1 1
#define TURNO_JUGADOR_2 2
#define MOSTRANDO_GANADOR 3 


bool estadoPulJug1Prev=false;
bool estadoPulJug2Prev=false;
bool estadoLedGanador=false;


unsigned long tiempoReferencia=0;
unsigned int tiempoDePartida=0;

int Tiempo_Mov_Jug1=0;
int Tiempo_Mov_Jug2=0;
int modo=DETENIDO;
int tiempoGanador=0;
int tiempo_1=0;
int tiempo_2=0;
int minutos_Jugador1=0;
int minutos_Jugador2=0;
int segundos_Jugador1=0;
int segundos_Jugador2=0;
int temp;

struct tiempo_partida
{









  
};







void setup() {
  // put your setup code h

Serial.begin(9600);


lcd.init();
lcd.backlight();
lcd.clear();

   lcd.setCursor(0,0);
  lcd.print("JUGADOR 1=");
    lcd.print("0");
    lcd.print(minutos_Jugador1);
  lcd.print(":");
  lcd.print("0");
  lcd.print(segundos_Jugador2);
  
  lcd.setCursor(0,1);
  lcd.print("JUGADOR 2=");
    lcd.print("0");
    lcd.print(minutos_Jugador2);
  lcd.print(":");
  lcd.print("0");
  lcd.print(segundos_Jugador2);
  

 pinMode(LED_JUGADOR_1, OUTPUT);
  pinMode(LED_JUGADOR_2, OUTPUT);
  pinMode(LED_GANADOR, OUTPUT);
  
  pinMode(PULSADOR_JUGADOR_1, INPUT_PULLUP);
  pinMode(PULSADOR_JUGADOR_2, INPUT_PULLUP);


tiempoReferencia=millis();

while(!Serial);





}

void loop() 
{


if( Serial.available()> 0) // Si hay datos disponibles en el puerto serie.
     {
         
        String str = Serial.readStringUntil('\n'); // Lee una cadena hasta \n
        if (str.compareTo("3")==0)
        {   temp=3;
          str="0K"; 
          tiempo_1=60*temp;
          tiempo_2=60*temp;

          
    
          }
        else  if (str.compareTo("5")==0)
        {   temp=5;
          str="0K"; 
          tiempo_1=60*temp;
          tiempo_2=60*temp;
    
          }
          else  if (str.compareTo("10")==0)
        { 
           temp=10;
          str="0K"; 
         tiempo_1=60*temp;
         tiempo_2=60*temp;
    
        }
          else   if (str.compareTo("20")==0)
        { 
          temp=20;
          str="0K"; 
          tiempo_1=60*temp;
          tiempo_2=60*temp;
         
        }
        else  if (str.compareTo("30")==0)
        { 
           temp=30;
          str="0K"; 
          tiempo_1=60*temp;
          tiempo_2=60*temp;
    
        }
        else
         {
          str="ERROR";
          
        }
        Serial.println(str);
        // Envía la respuesta a través del puerto serie.
     }


    
   
 
   minutos_Jugador1 = tiempo_1/60;
   minutos_Jugador2 = tiempo_2/60;


   segundos_Jugador1 = tiempo_1%60;
   segundos_Jugador2 = tiempo_2%60;




   // 1. LEEMOS Y PROCESAMOS LAS ENTRADAS
  bool estadoPulJug1 = !digitalRead(PULSADOR_JUGADOR_1);
  bool estadoPulJug2 = !digitalRead(PULSADOR_JUGADOR_2);
 
  if (estadoPulJug1 == true && estadoPulJug1Prev == false) {
    if(modo==DETENIDO || modo == TURNO_JUGADOR_1){
      modo=TURNO_JUGADOR_2;
        digitalWrite(LED_JUGADOR_2,true);
        digitalWrite(LED_JUGADOR_1,false);
    }
    
    }
  if (estadoPulJug2 == true && estadoPulJug2Prev == false) {
    if(modo==DETENIDO || modo == TURNO_JUGADOR_2){
      modo=TURNO_JUGADOR_1;
        digitalWrite(LED_JUGADOR_1,true);
        digitalWrite(LED_JUGADOR_2,false);      
    }
    
   }

  // 2. EJECUTAMOS LAS TAREAS PERIODICAS
  unsigned long tiempoActual = millis();
  if ((tiempoActual - tiempoReferencia) >= 1000) {
    tiempoReferencia = tiempoActual;
  //En este punto del progrma Arduino esta cada 1 segundo
    
    //De acuerdo al modo descontamos el tiempo del jugardor
    //correspondiente 
    if(modo == TURNO_JUGADOR_1)
    {
        tiempoDePartida++;
         tiempo_1--;  



    if(minutos_Jugador1>9)
   {
      lcd.setCursor(10,0);
    lcd.print(minutos_Jugador1);
     lcd.print(":");
    }
    else{
         lcd.setCursor(10,0);
         lcd.print("0");
    lcd.print(minutos_Jugador1);
      lcd.print(":");
    }



      if(segundos_Jugador1>9)
      {
        //Mostramos el tiempo restante
        lcd.setCursor(13,0);
        lcd.print(segundos_Jugador1);
      }
      else{

        lcd.setCursor(13,0);
         lcd.print("0");
         lcd.print(segundos_Jugador1);
        
      }
      
       //Verificamos si hay algun ganador?
        if(segundos_Jugador1==0 && minutos_Jugador1==0){
         
          modo=MOSTRANDO_GANADOR;
          lcd.setCursor(10,1);
          lcd.print("GANO ");
          lcd.setCursor(10,0);
          lcd.print("     ");

          Serial.print("Tiempo de partida:");
          Serial.println(tiempoDePartida);
          tiempoDePartida=0;
          digitalWrite(LED_GANADOR,true);
          tiempoGanador=15;
        }
   
    }
    
    if(modo == TURNO_JUGADOR_2)
    {
        tiempoDePartida++;

     tiempo_2--;
     // Tiempo_Base_Jug2++;
    // lcd.setCursor(13,1);
    // lcd.print(Tiempo_Base_Jug2);
  // Serial.println(Tiempo_Base_Jug1);
      // Tiempo_Base_Jug1=0;


        if(minutos_Jugador2>9)
        {
        //Mostramos el tiempo restante
          lcd.setCursor(10,1);
         lcd.print(minutos_Jugador2);
        }
        else{
          lcd.setCursor(10,1);
          lcd.print("0");
          lcd.print(minutos_Jugador2);
        }

     if(segundos_Jugador2>9)
   {
     lcd.setCursor(13,1);
     lcd.print(segundos_Jugador2);
  
    }

    else{
      lcd.setCursor(13,1);
       lcd.print("0");
       lcd.print(segundos_Jugador2);

      }

        
        if(segundos_Jugador2==0 && minutos_Jugador2==0)
        {
         
          modo=MOSTRANDO_GANADOR;   
          lcd.setCursor(10,0);
          lcd.print("GANO ");
          lcd.setCursor(10,1);
          lcd.print("     ");

          Serial.print("Tiempo de partida:");
          Serial.println(tiempoDePartida);
          tiempoDePartida=0;

          digitalWrite(LED_GANADOR,true);
          tiempoGanador=5;
        }

    }
    
    if(modo == MOSTRANDO_GANADOR)
    {
      tiempoGanador--;
      
      estadoLedGanador=!estadoLedGanador;
      digitalWrite(LED_GANADOR,estadoLedGanador);
     
      //Si paso el tiempo para mostrar el ganador
      //pasamos a DETENIDO
      if(tiempoGanador==0)
      {
         modo=DETENIDO;   
         digitalWrite(LED_GANADOR,false);
         digitalWrite(LED_JUGADOR_1,false);
         digitalWrite(LED_JUGADOR_2,false);
         
         
         lcd.clear();
         lcd.setCursor(0,0);
         lcd.print("JUGADOR 1=");
         
         lcd.setCursor(0,1);
         lcd.print("JUGADOR 2=");
         
       }    
     }

    
    }

  //actualizamos el valor de nuestras variables de estado previo
  estadoPulJug1Prev = estadoPulJug1;
  estadoPulJug2Prev = estadoPulJug2;

  delay(10); // para alivianar la carga del navegador
}























